# Workflow to check whether changes to master fulfill all requirements.
name: Status checks

on:
  push:
    branches: [ master ]
  pull_request:

jobs:

  build:
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, 386, arm, arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16

      - name: Build
        run: go build -v -o irma-${{ matrix.os }}-${{ matrix.arch }} ./irma
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}

      - uses: actions/upload-artifact@v3
        with:
          name: irma-${{ matrix.os }}-${{ matrix.arch }}
          path: ./irma-${{ matrix.os }}-${{ matrix.arch }}

  # We only check the build stage of the Dockerfile, because building the full Dockerfile requires
  # downloading IRMA schemes. We check the status of the full Dockerfile once every week on master
  # in the weekly-master-checks.
  docker-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Run Dockerfile build stage
      run: docker build -t privacybydesign/irma:build --target build .

    - name: Test Docker image
      # Because we have only run the build stage, we have to explicitly set irma as entrypoint.
      run: docker run --entrypoint irma privacybydesign/irma:build version
      
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1.16

    - name: Run gofmt
      # gofmt does not return non-zero exit codes on failure, so we have to check that there are no issues using grep.
      run: gofmt -d -e . | (! grep ^)
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Install ineffassign
      run: go install github.com/gordonklaus/ineffassign@latest
      
    - name: Run ineffassign
      run: ineffassign ./...
      
    - name: Install misspell
      run: go install github.com/client9/misspell/cmd/misspell@latest
      
    - name: Run misspell
      run: misspell -error .

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: Run all unit tests
        run: docker-compose run test -v ./...

  analyze:
    # Require successful build to make sure analysis does not fail on syntax errors.
    needs: build
    uses: ./.github/workflows/codeql-analysis.yml
